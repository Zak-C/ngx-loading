{"version":3,"file":"ngx-loading.js","sources":["~/ngx-loading/ngx-loading/ngx-loading.ts","~/ngx-loading/ngx-loading/src/ngx-loading.module.ts","~/ngx-loading/ngx-loading/src/ngx-loading.component.ts","~/ngx-loading/ngx-loading/src/ngx-loading.service.ts","~/ngx-loading/ngx-loading/src/ngx-loading.config.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {LoadingModule,ANIMATION_TYPES} from './public_api';\n\nexport {LoadingComponent as ɵb} from './src/ngx-loading.component';\nexport {ILoadingConfig as ɵa} from './src/ngx-loading.config';\nexport {LoadingConfigService as ɵc} from './src/ngx-loading.service';","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoadingComponent } from './ngx-loading.component';\nimport { ILoadingConfig } from './ngx-loading.config';\nimport { LoadingConfigService } from './ngx-loading.service';\nexport class LoadingModule {\n/**\n * @param {?} loadingConfig\n * @return {?}\n */\nstatic forRoot(loadingConfig: ILoadingConfig): ModuleWithProviders {\n        return {\n            ngModule: LoadingModule,\n            providers: [{ provide: 'loadingConfig', useValue: loadingConfig }]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    exports: [LoadingComponent],\n    declarations: [LoadingComponent],\n    providers: [LoadingConfigService],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LoadingModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLoadingModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLoadingModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\nimport { LoadingConfigService } from './ngx-loading.service';\nimport {\n  ILoadingConfig,\n  LoadingConfig,\n  ANIMATION_TYPES\n} from './ngx-loading.config';\nexport class LoadingComponent implements OnInit {\n   show: boolean;\n   config: ILoadingConfig = new LoadingConfig();\npublic ANIMATION_TYPES = ANIMATION_TYPES;\npublic loadingConfig: ILoadingConfig = {\n    animationType: \"\",\n    backdropBackgroundColour: \"\",\n    backdropBorderRadius: \"\",\n    fullScreenBackdrop: false,\n    primaryColour: \"\",\n    secondaryColour: \"\",\n    tertiaryColour: \"\"\n  };\nprivate defaultConfig: ILoadingConfig = {\n    animationType: ANIMATION_TYPES.threeBounce,\n    backdropBackgroundColour: \"rgba(0, 0, 0, 0.3)\",\n    backdropBorderRadius: \"0px\",\n    fullScreenBackdrop: false,\n    primaryColour: \"#ffffff\",\n    secondaryColour: \"#ffffff\",\n    tertiaryColour: \"#ffffff\"\n  };\n/**\n * @param {?} loadingConfigService\n */\nconstructor(private loadingConfigService: LoadingConfigService) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    for (let /** @type {?} */ option in this.defaultConfig) {\n      if (typeof this.loadingConfig[option] == \"boolean\") {\n        if (this.config[option] != null) {\n          this.loadingConfig[option] = this.config[option];\n          continue;\n        }\n\n        this.loadingConfig[option] =\n          this.loadingConfigService.loadingConfig[option] != null\n            ? this.loadingConfigService.loadingConfig[option]\n            : this.defaultConfig[option];\n      } else {\n        if (this.config[option] != null) {\n          this.loadingConfig[option] = this.config[option];\n          continue;\n        }\n\n        this.loadingConfig[option] =\n          this.loadingConfigService.loadingConfig[option] != null\n            ? this.loadingConfigService.loadingConfig[option]\n            : this.defaultConfig[option];\n      }\n    }\n  }\n/**\n * @param {?} animationType\n * @return {?}\n */\npublic getAnimationType(animationType: string): string {\n    let /** @type {?} */ animationTypeSet: string;\n    switch (animationType) {\n      case ANIMATION_TYPES.chasingDots:\n        animationTypeSet = ANIMATION_TYPES.chasingDots;\n        break;\n      case ANIMATION_TYPES.circle:\n        animationTypeSet = ANIMATION_TYPES.circle;\n        break;\n      case ANIMATION_TYPES.circleSwish:\n        animationTypeSet = ANIMATION_TYPES.circleSwish;\n        break;\n      case ANIMATION_TYPES.cubeGrid:\n        animationTypeSet = ANIMATION_TYPES.cubeGrid;\n        break;\n      case ANIMATION_TYPES.doubleBounce:\n        animationTypeSet = ANIMATION_TYPES.doubleBounce;\n        break;\n      case ANIMATION_TYPES.pulse:\n        animationTypeSet = ANIMATION_TYPES.pulse;\n        break;\n      case ANIMATION_TYPES.rectangleBounce:\n        animationTypeSet = ANIMATION_TYPES.rectangleBounce;\n        break;\n      case ANIMATION_TYPES.rotatingPlane:\n        animationTypeSet = ANIMATION_TYPES.rotatingPlane;\n        break;\n      case ANIMATION_TYPES.threeBounce:\n        animationTypeSet = ANIMATION_TYPES.threeBounce;\n        break;\n      case ANIMATION_TYPES.wanderingCubes:\n        animationTypeSet = ANIMATION_TYPES.wanderingCubes;\n        break;\n      default:\n        animationTypeSet = ANIMATION_TYPES.threeBounce;\n    }\n    return animationTypeSet;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: \"ngx-loading\",\n  template: `\n    <div *ngIf=\"show\" class=\"backdrop\" [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\" [ngStyle]=\"{'border-radius': loadingConfig?.backdropBorderRadius, 'background-color': loadingConfig?.backdropBackgroundColour}\"></div>\n    <div *ngIf=\"show\">\n      <div class=\"spinner-circle\" *ngIf=\"getAnimationType(loadingConfig?.animationType) === ANIMATION_TYPES.circle\" [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\"\n        [ngStyle]=\"{'border-top-color': loadingConfig?.secondaryColour, 'border-right-color': loadingConfig?.secondaryColour, 'border-bottom-color': loadingConfig?.secondaryColour, 'border-left-color': loadingConfig?.primaryColour}\"></div>\n\n      <div *ngIf=\"getAnimationType(loadingConfig?.animationType) === ANIMATION_TYPES.cubeGrid\" class=\"sk-cube-grid\" [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\">\n        <div class=\"sk-cube sk-cube1\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"sk-cube sk-cube2\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"sk-cube sk-cube3\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"sk-cube sk-cube4\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"sk-cube sk-cube5\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"sk-cube sk-cube6\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"sk-cube sk-cube7\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"sk-cube sk-cube8\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"sk-cube sk-cube9\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n      </div>\n\n      <div *ngIf=\"getAnimationType(loadingConfig?.animationType) === ANIMATION_TYPES.threeBounce\" class=\"spinner-three-bounce\"\n        [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\">\n        <div class=\"bounce1\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"bounce2\" [ngStyle]=\"{'background-color': loadingConfig?.secondaryColour}\"></div>\n        <div class=\"bounce3\" [ngStyle]=\"{'background-color': loadingConfig?.tertiaryColour}\"></div>\n      </div>\n\n      <div class=\"spinner-sk-rotateplane\" *ngIf=\"getAnimationType(loadingConfig?.animationType) === ANIMATION_TYPES.rotatingPlane\"\n        [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\" [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\"></div>\n\n      <div class=\"spinner-rectangle-bounce\" *ngIf=\"getAnimationType(loadingConfig?.animationType) === ANIMATION_TYPES.rectangleBounce\"\n        [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\">\n        <div class=\"rect1\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"rect2\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"rect3\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"rect4\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"rect5\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n      </div>\n\n      <div class=\"spinner-wandering-cubes\" *ngIf=\"getAnimationType(loadingConfig?.animationType) === ANIMATION_TYPES.wanderingCubes\"\n        [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\">\n        <div class=\"cube1\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"cube2\" [ngStyle]=\"{'background-color': loadingConfig?.secondaryColour}\"></div>\n      </div>\n\n      <div class=\"spinner-double-bounce\" *ngIf=\"getAnimationType(loadingConfig?.animationType) === ANIMATION_TYPES.doubleBounce\"\n        [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\">\n        <div class=\"double-bounce1\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"double-bounce2\" [ngStyle]=\"{'background-color': loadingConfig?.secondaryColour}\"></div>\n      </div>\n\n      <div class=\"spinner-pulse\" *ngIf=\"getAnimationType(loadingConfig?.animationType) === ANIMATION_TYPES.pulse\" [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\"\n        [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n\n      <div class=\"spinner-chasing-dots\" *ngIf=\"getAnimationType(loadingConfig?.animationType) === ANIMATION_TYPES.chasingDots\"\n        [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\">\n        <div class=\"dot1\" [ngStyle]=\"{'background-color': loadingConfig?.primaryColour}\"></div>\n        <div class=\"dot2\" [ngStyle]=\"{'background-color': loadingConfig?.secondaryColour}\"></div>\n      </div>\n\n      <div class=\"spinner-circle-swish\" *ngIf=\"getAnimationType(loadingConfig?.animationType) === ANIMATION_TYPES.circleSwish\"\n        [ngClass]=\"{'full-screen' : loadingConfig?.fullScreenBackdrop == true}\" [ngStyle]=\"{'color': loadingConfig?.primaryColour}\"></div>\n\n    </div>\n  `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LoadingConfigService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'show': [{ type: Input },],\n'config': [{ type: Input },],\n};\n}\n\nfunction LoadingComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nLoadingComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLoadingComponent.ctorParameters;\n/** @type {?} */\nLoadingComponent.propDecorators;\n/** @type {?} */\nLoadingComponent.prototype.show;\n/** @type {?} */\nLoadingComponent.prototype.config;\n/** @type {?} */\nLoadingComponent.prototype.ANIMATION_TYPES;\n/** @type {?} */\nLoadingComponent.prototype.loadingConfig;\n/** @type {?} */\nLoadingComponent.prototype.defaultConfig;\n/** @type {?} */\nLoadingComponent.prototype.loadingConfigService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Inject, Optional } from '@angular/core';\n\nimport { ILoadingConfig, LoadingConfig } from './ngx-loading.config';\nexport class LoadingConfigService {\npublic loadingConfig: ILoadingConfig;\n/**\n * @param {?} config\n */\nconstructor(\nprivate config: ILoadingConfig) {\n        this.loadingConfig = config || new LoadingConfig();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['loadingConfig', ] }, ]},\n];\n}\n\nfunction LoadingConfigService_tsickle_Closure_declarations() {\n/** @type {?} */\nLoadingConfigService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLoadingConfigService.ctorParameters;\n/** @type {?} */\nLoadingConfigService.prototype.loadingConfig;\n/** @type {?} */\nLoadingConfigService.prototype.config;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","export interface ILoadingConfig {\n    backdropBorderRadius?: string;\n    backdropBackgroundColour?: string;\n    fullScreenBackdrop?: boolean;\n    animationType?: string;\n    primaryColour?: string;\n    secondaryColour?: string;\n    tertiaryColour?: string;\n    [key: string]: string | boolean | undefined;\n}\nexport class LoadingConfig implements ILoadingConfig {\n    backdropBorderRadius?: string;\n    backdropBackgroundColour?: string;\n    fullScreenBackdrop?: boolean;\n    animationType?: string;\n    primaryColour?: string;\n    secondaryColour?: string;\n    tertiaryColour?: string;\n    [key: string]: string | boolean | undefined;\n/**\n * @param {?=} config\n */\nconstructor(config: ILoadingConfig = {}) {\n        this.backdropBorderRadius = config.backdropBorderRadius;\n        this.backdropBackgroundColour = config.backdropBackgroundColour;\n        this.fullScreenBackdrop = config.fullScreenBackdrop;\n        this.animationType = config.animationType;\n        this.primaryColour = config.primaryColour;\n        this.secondaryColour = config.secondaryColour;\n        this.tertiaryColour = config.tertiaryColour;\n    }\n}\n\nfunction LoadingConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nLoadingConfig.prototype.backdropBorderRadius;\n/** @type {?} */\nLoadingConfig.prototype.backdropBackgroundColour;\n/** @type {?} */\nLoadingConfig.prototype.fullScreenBackdrop;\n/** @type {?} */\nLoadingConfig.prototype.animationType;\n/** @type {?} */\nLoadingConfig.prototype.primaryColour;\n/** @type {?} */\nLoadingConfig.prototype.secondaryColour;\n/** @type {?} */\nLoadingConfig.prototype.tertiaryColour;\n}\n\n\nexport const /** @type {?} */ ANIMATION_TYPES = {\n    chasingDots: 'chasing-dots',\n    circle: 'sk-circle',\n    circleSwish: 'circleSwish',\n    cubeGrid: 'sk-cube-grid',\n    doubleBounce: 'double-bounce',\n    pulse: 'pulse',\n    rectangleBounce: 'rectangle-bounce',\n    rotatingPlane: 'rotating-plane',\n    threeBounce: 'three-bounce',\n    wanderingCubes: 'wandering-cubes'\n}"],"names":[],"mappings":"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"}